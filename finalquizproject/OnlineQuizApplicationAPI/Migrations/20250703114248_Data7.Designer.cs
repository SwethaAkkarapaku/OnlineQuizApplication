// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineQuizApplicationAPI.Models;

#nullable disable

namespace OnlineQuizApplicationAPI.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20250703114248_Data7")]
    partial class Data7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts", t =>
                        {
                            t.HasCheckConstraint("CK_Account_Role", "[Role] IN ('User', 'Admin')");
                        });
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.AdminInfo", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.HasIndex("AccountId");

                    b.ToTable("AdminInfos");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Options", b =>
                {
                    b.Property<Guid>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Answer")
                        .HasColumnType("smallint");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options", t =>
                        {
                            t.HasCheckConstraint("CK_Options_Answer", "[Answer] IN (0, 1)");

                            t.HasCheckConstraint("CK_Options_Answer_ValidValues", "[Answer] IN (0, 1)");
                        });
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Questions", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuestionText")
                        .IsUnique();

                    b.HasIndex("TopicId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Quiz", b =>
                {
                    b.Property<Guid>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.HasKey("QuizId");

                    b.ToTable("Quizs", t =>
                        {
                            t.HasCheckConstraint("CK_Quiz_CategoryName", "[CategoryName] IN ('Frontend', 'Backend', 'Database')");
                        });
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.QuizAttempt", b =>
                {
                    b.Property<Guid>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttemptTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AttemptId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizAttempts", t =>
                        {
                            t.HasCheckConstraint("CK_QuizAttempt_Status", "[Status] IN ('notstarted', 'pending', 'completed')");
                        });
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Topics", b =>
                {
                    b.Property<Guid>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("TopicId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.UserInfo", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("AccountId");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("QuestionsQuiz", b =>
                {
                    b.Property<Guid>("QuestionsQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizzesQuizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionsQuestionId", "QuizzesQuizId");

                    b.HasIndex("QuizzesQuizId");

                    b.ToTable("QuestionsQuiz");
                });

            modelBuilder.Entity("QuestionsQuiz1", b =>
                {
                    b.Property<Guid>("Questions1QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Questions1QuestionId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions", (string)null);
                });

            modelBuilder.Entity("QuizUserInfo", b =>
                {
                    b.Property<Guid>("UserInfoUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("quizzesQuizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserInfoUserId", "quizzesQuizId");

                    b.HasIndex("quizzesQuizId");

                    b.ToTable("QuizUserInfo");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.AdminInfo", b =>
                {
                    b.HasOne("OnlineQuizApplicationAPI.Models.Account", "userData")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userData");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Options", b =>
                {
                    b.HasOne("OnlineQuizApplicationAPI.Models.Questions", "QuestionData")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionData");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Questions", b =>
                {
                    b.HasOne("OnlineQuizApplicationAPI.Models.Topics", "Topics")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.QuizAttempt", b =>
                {
                    b.HasOne("OnlineQuizApplicationAPI.Models.Quiz", "Quiz")
                        .WithMany("QuizAttempt")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineQuizApplicationAPI.Models.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Topics", b =>
                {
                    b.HasOne("OnlineQuizApplicationAPI.Models.Category", "Category")
                        .WithMany("technologies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.UserInfo", b =>
                {
                    b.HasOne("OnlineQuizApplicationAPI.Models.Account", "accountData")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("accountData");
                });

            modelBuilder.Entity("QuestionsQuiz", b =>
                {
                    b.HasOne("OnlineQuizApplicationAPI.Models.Questions", null)
                        .WithMany()
                        .HasForeignKey("QuestionsQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineQuizApplicationAPI.Models.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuestionsQuiz1", b =>
                {
                    b.HasOne("OnlineQuizApplicationAPI.Models.Questions", null)
                        .WithMany()
                        .HasForeignKey("Questions1QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineQuizApplicationAPI.Models.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizUserInfo", b =>
                {
                    b.HasOne("OnlineQuizApplicationAPI.Models.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UserInfoUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineQuizApplicationAPI.Models.Quiz", null)
                        .WithMany()
                        .HasForeignKey("quizzesQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Category", b =>
                {
                    b.Navigation("technologies");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Questions", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Quiz", b =>
                {
                    b.Navigation("QuizAttempt");
                });

            modelBuilder.Entity("OnlineQuizApplicationAPI.Models.Topics", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
